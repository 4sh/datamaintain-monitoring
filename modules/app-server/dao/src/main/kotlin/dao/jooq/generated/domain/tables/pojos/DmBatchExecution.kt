/*
 * This file is generated by jOOQ.
 */
package dao.jooq.generated.domain.tables.pojos


import dao.jooq.generated.domain.enums.BatchExecutionOrigin
import dao.jooq.generated.domain.enums.BatchExecutionType
import dao.jooq.generated.domain.enums.ExecutionStatus

import java.io.Serializable
import java.time.OffsetDateTime
import java.util.UUID


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
data class DmBatchExecution(
    val id: UUID? = null,
    val startDate: OffsetDateTime? = null,
    val endDate: OffsetDateTime? = null,
    val durationInMs: Int? = null,
    val origin: BatchExecutionOrigin? = null,
    val type: BatchExecutionType? = null,
    val status: ExecutionStatus? = null,
    val fkEnvironmentRef: UUID? = null,
    val fkModuleRef: UUID? = null
): Serializable {

    override fun equals(other: Any?): Boolean {
        if (this === other)
            return true
        if (other == null)
            return false
        if (this::class != other::class)
            return false
        val o: DmBatchExecution = other as DmBatchExecution
        if (this.id == null) {
            if (o.id != null)
                return false
        }
        else if (this.id != o.id)
            return false
        if (this.startDate == null) {
            if (o.startDate != null)
                return false
        }
        else if (this.startDate != o.startDate)
            return false
        if (this.endDate == null) {
            if (o.endDate != null)
                return false
        }
        else if (this.endDate != o.endDate)
            return false
        if (this.durationInMs == null) {
            if (o.durationInMs != null)
                return false
        }
        else if (this.durationInMs != o.durationInMs)
            return false
        if (this.origin == null) {
            if (o.origin != null)
                return false
        }
        else if (this.origin != o.origin)
            return false
        if (this.type == null) {
            if (o.type != null)
                return false
        }
        else if (this.type != o.type)
            return false
        if (this.status == null) {
            if (o.status != null)
                return false
        }
        else if (this.status != o.status)
            return false
        if (this.fkEnvironmentRef == null) {
            if (o.fkEnvironmentRef != null)
                return false
        }
        else if (this.fkEnvironmentRef != o.fkEnvironmentRef)
            return false
        if (this.fkModuleRef == null) {
            if (o.fkModuleRef != null)
                return false
        }
        else if (this.fkModuleRef != o.fkModuleRef)
            return false
        return true
    }

    override fun hashCode(): Int {
        val prime = 31
        var result = 1
        result = prime * result + (if (this.id == null) 0 else this.id.hashCode())
        result = prime * result + (if (this.startDate == null) 0 else this.startDate.hashCode())
        result = prime * result + (if (this.endDate == null) 0 else this.endDate.hashCode())
        result = prime * result + (if (this.durationInMs == null) 0 else this.durationInMs.hashCode())
        result = prime * result + (if (this.origin == null) 0 else this.origin.hashCode())
        result = prime * result + (if (this.type == null) 0 else this.type.hashCode())
        result = prime * result + (if (this.status == null) 0 else this.status.hashCode())
        result = prime * result + (if (this.fkEnvironmentRef == null) 0 else this.fkEnvironmentRef.hashCode())
        result = prime * result + (if (this.fkModuleRef == null) 0 else this.fkModuleRef.hashCode())
        return result
    }

    override fun toString(): String {
        val sb = StringBuilder("DmBatchExecution (")

        sb.append(id)
        sb.append(", ").append(startDate)
        sb.append(", ").append(endDate)
        sb.append(", ").append(durationInMs)
        sb.append(", ").append(origin)
        sb.append(", ").append(type)
        sb.append(", ").append(status)
        sb.append(", ").append(fkEnvironmentRef)
        sb.append(", ").append(fkModuleRef)

        sb.append(")")
        return sb.toString()
    }
}

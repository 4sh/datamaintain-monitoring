/*
 * This file is generated by jOOQ.
 */
package dao.jooq.generated.domain.tables


import dao.jooq.generated.domain.Public
import dao.jooq.generated.domain.keys.DM_BATCH_EXECUTION__DM_BATCH_EXECUTION_FK_ENVIRONMENT_REF_FKEY
import dao.jooq.generated.domain.keys.DM_ENVIRONMENT_PKEY
import dao.jooq.generated.domain.keys.DM_ENVIRONMENT__DM_ENVIRONMENT_FK_PROJECT_REF_FKEY
import dao.jooq.generated.domain.keys.DM_MODULE_DM_ENVIRONMENT_TOKEN__DM_MODULE_DM_ENVIRONMENT_TOKEN_FK_ENVIRONMENT_REF_FKEY
import dao.jooq.generated.domain.tables.DmBatchExecution.DmBatchExecutionPath
import dao.jooq.generated.domain.tables.DmModuleDmEnvironmentToken.DmModuleDmEnvironmentTokenPath
import dao.jooq.generated.domain.tables.DmProject.DmProjectPath
import dao.jooq.generated.domain.tables.records.DmEnvironmentRecord

import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmEnvironment(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DmEnvironmentRecord>?,
    parentPath: InverseForeignKey<out Record, DmEnvironmentRecord>?,
    aliased: Table<DmEnvironmentRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<DmEnvironmentRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.dm_environment</code>
         */
        val DM_ENVIRONMENT: DmEnvironment = DmEnvironment()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DmEnvironmentRecord> = DmEnvironmentRecord::class.java

    /**
     * The column <code>public.dm_environment.id</code>.
     */
    val ID: TableField<DmEnvironmentRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.dm_environment.name</code>.
     */
    val NAME: TableField<DmEnvironmentRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.dm_environment.small_name</code>.
     */
    val SMALL_NAME: TableField<DmEnvironmentRecord, String?> = createField(DSL.name("small_name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.dm_environment.fk_project_ref</code>.
     */
    val FK_PROJECT_REF: TableField<DmEnvironmentRecord, UUID?> = createField(DSL.name("fk_project_ref"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<DmEnvironmentRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<DmEnvironmentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<DmEnvironmentRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.dm_environment</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dm_environment</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dm_environment</code> table reference
     */
    constructor(): this(DSL.name("dm_environment"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DmEnvironmentRecord>?, parentPath: InverseForeignKey<out Record, DmEnvironmentRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DM_ENVIRONMENT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DmEnvironmentPath : DmEnvironment, Path<DmEnvironmentRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DmEnvironmentRecord>?, parentPath: InverseForeignKey<out Record, DmEnvironmentRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<DmEnvironmentRecord>): super(alias, aliased)
        override fun `as`(alias: String): DmEnvironmentPath = DmEnvironmentPath(DSL.name(alias), this)
        override fun `as`(alias: Name): DmEnvironmentPath = DmEnvironmentPath(alias, this)
        override fun `as`(alias: Table<*>): DmEnvironmentPath = DmEnvironmentPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<DmEnvironmentRecord> = DM_ENVIRONMENT_PKEY
    override fun getReferences(): List<ForeignKey<DmEnvironmentRecord, *>> = listOf(DM_ENVIRONMENT__DM_ENVIRONMENT_FK_PROJECT_REF_FKEY)

    private lateinit var _dmProject: DmProjectPath

    /**
     * Get the implicit join path to the <code>public.dm_project</code> table.
     */
    fun dmProject(): DmProjectPath {
        if (!this::_dmProject.isInitialized)
            _dmProject = DmProjectPath(this, DM_ENVIRONMENT__DM_ENVIRONMENT_FK_PROJECT_REF_FKEY, null)

        return _dmProject;
    }

    val dmProject: DmProjectPath
        get(): DmProjectPath = dmProject()

    private lateinit var _dmBatchExecution: DmBatchExecutionPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.dm_batch_execution</code> table
     */
    fun dmBatchExecution(): DmBatchExecutionPath {
        if (!this::_dmBatchExecution.isInitialized)
            _dmBatchExecution = DmBatchExecutionPath(this, null, DM_BATCH_EXECUTION__DM_BATCH_EXECUTION_FK_ENVIRONMENT_REF_FKEY.inverseKey)

        return _dmBatchExecution;
    }

    val dmBatchExecution: DmBatchExecutionPath
        get(): DmBatchExecutionPath = dmBatchExecution()

    private lateinit var _dmModuleDmEnvironmentToken: DmModuleDmEnvironmentTokenPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.dm_module_dm_environment_token</code> table
     */
    fun dmModuleDmEnvironmentToken(): DmModuleDmEnvironmentTokenPath {
        if (!this::_dmModuleDmEnvironmentToken.isInitialized)
            _dmModuleDmEnvironmentToken = DmModuleDmEnvironmentTokenPath(this, null, DM_MODULE_DM_ENVIRONMENT_TOKEN__DM_MODULE_DM_ENVIRONMENT_TOKEN_FK_ENVIRONMENT_REF_FKEY.inverseKey)

        return _dmModuleDmEnvironmentToken;
    }

    val dmModuleDmEnvironmentToken: DmModuleDmEnvironmentTokenPath
        get(): DmModuleDmEnvironmentTokenPath = dmModuleDmEnvironmentToken()
    override fun `as`(alias: String): DmEnvironment = DmEnvironment(DSL.name(alias), this)
    override fun `as`(alias: Name): DmEnvironment = DmEnvironment(alias, this)
    override fun `as`(alias: Table<*>): DmEnvironment = DmEnvironment(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DmEnvironment = DmEnvironment(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DmEnvironment = DmEnvironment(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DmEnvironment = DmEnvironment(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): DmEnvironment = DmEnvironment(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): DmEnvironment = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): DmEnvironment = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): DmEnvironment = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): DmEnvironment = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): DmEnvironment = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): DmEnvironment = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): DmEnvironment = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): DmEnvironment = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): DmEnvironment = where(DSL.notExists(select))
}

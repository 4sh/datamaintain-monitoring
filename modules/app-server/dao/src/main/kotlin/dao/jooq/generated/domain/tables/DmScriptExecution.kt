/*
 * This file is generated by jOOQ.
 */
package dao.jooq.generated.domain.tables


import dao.jooq.generated.domain.Public
import dao.jooq.generated.domain.enums.ExecutionStatus
import dao.jooq.generated.domain.keys.DM_SCRIPT_EXECUTION_DM_TAG__DM_SCRIPT_EXECUTION_DM_TAG_FK_SCRIPT_EXECUTION_REF_FKEY
import dao.jooq.generated.domain.keys.DM_SCRIPT_EXECUTION_PKEY
import dao.jooq.generated.domain.keys.DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_BATCH_EXECUTION_REF_FKEY
import dao.jooq.generated.domain.keys.DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_SCRIPT_REF_FKEY
import dao.jooq.generated.domain.tables.DmBatchExecution.DmBatchExecutionPath
import dao.jooq.generated.domain.tables.DmScript.DmScriptPath
import dao.jooq.generated.domain.tables.DmScriptExecutionDmTag.DmScriptExecutionDmTagPath
import dao.jooq.generated.domain.tables.DmTag.DmTagPath
import dao.jooq.generated.domain.tables.records.DmScriptExecutionRecord

import java.time.OffsetDateTime
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmScriptExecution(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, DmScriptExecutionRecord>?,
    parentPath: InverseForeignKey<out Record, DmScriptExecutionRecord>?,
    aliased: Table<DmScriptExecutionRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<DmScriptExecutionRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.dm_script_execution</code>
         */
        val DM_SCRIPT_EXECUTION: DmScriptExecution = DmScriptExecution()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<DmScriptExecutionRecord> = DmScriptExecutionRecord::class.java

    /**
     * The column <code>public.dm_script_execution.id</code>.
     */
    val ID: TableField<DmScriptExecutionRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.dm_script_execution.start_date</code>.
     */
    val START_DATE: TableField<DmScriptExecutionRecord, OffsetDateTime?> = createField(DSL.name("start_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.dm_script_execution.end_date</code>.
     */
    val END_DATE: TableField<DmScriptExecutionRecord, OffsetDateTime?> = createField(DSL.name("end_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.dm_script_execution.duration_in_ms</code>.
     */
    val DURATION_IN_MS: TableField<DmScriptExecutionRecord, Int?> = createField(DSL.name("duration_in_ms"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.dm_script_execution.execution_order_index</code>.
     */
    val EXECUTION_ORDER_INDEX: TableField<DmScriptExecutionRecord, Int?> = createField(DSL.name("execution_order_index"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.dm_script_execution.output</code>.
     */
    val OUTPUT: TableField<DmScriptExecutionRecord, String?> = createField(DSL.name("output"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.dm_script_execution.status</code>.
     */
    val STATUS: TableField<DmScriptExecutionRecord, ExecutionStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(ExecutionStatus::class.java), this, "")

    /**
     * The column <code>public.dm_script_execution.fk_script_ref</code>.
     */
    val FK_SCRIPT_REF: TableField<DmScriptExecutionRecord, String?> = createField(DSL.name("fk_script_ref"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column
     * <code>public.dm_script_execution.fk_batch_execution_ref</code>.
     */
    val FK_BATCH_EXECUTION_REF: TableField<DmScriptExecutionRecord, UUID?> = createField(DSL.name("fk_batch_execution_ref"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<DmScriptExecutionRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<DmScriptExecutionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<DmScriptExecutionRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.dm_script_execution</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dm_script_execution</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dm_script_execution</code> table reference
     */
    constructor(): this(DSL.name("dm_script_execution"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DmScriptExecutionRecord>?, parentPath: InverseForeignKey<out Record, DmScriptExecutionRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, DM_SCRIPT_EXECUTION, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class DmScriptExecutionPath : DmScriptExecution, Path<DmScriptExecutionRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, DmScriptExecutionRecord>?, parentPath: InverseForeignKey<out Record, DmScriptExecutionRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<DmScriptExecutionRecord>): super(alias, aliased)
        override fun `as`(alias: String): DmScriptExecutionPath = DmScriptExecutionPath(DSL.name(alias), this)
        override fun `as`(alias: Name): DmScriptExecutionPath = DmScriptExecutionPath(alias, this)
        override fun `as`(alias: Table<*>): DmScriptExecutionPath = DmScriptExecutionPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<DmScriptExecutionRecord> = DM_SCRIPT_EXECUTION_PKEY
    override fun getReferences(): List<ForeignKey<DmScriptExecutionRecord, *>> = listOf(DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_BATCH_EXECUTION_REF_FKEY, DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_SCRIPT_REF_FKEY)

    private lateinit var _dmBatchExecution: DmBatchExecutionPath

    /**
     * Get the implicit join path to the <code>public.dm_batch_execution</code>
     * table.
     */
    fun dmBatchExecution(): DmBatchExecutionPath {
        if (!this::_dmBatchExecution.isInitialized)
            _dmBatchExecution = DmBatchExecutionPath(this, DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_BATCH_EXECUTION_REF_FKEY, null)

        return _dmBatchExecution;
    }

    val dmBatchExecution: DmBatchExecutionPath
        get(): DmBatchExecutionPath = dmBatchExecution()

    private lateinit var _dmScript: DmScriptPath

    /**
     * Get the implicit join path to the <code>public.dm_script</code> table.
     */
    fun dmScript(): DmScriptPath {
        if (!this::_dmScript.isInitialized)
            _dmScript = DmScriptPath(this, DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_SCRIPT_REF_FKEY, null)

        return _dmScript;
    }

    val dmScript: DmScriptPath
        get(): DmScriptPath = dmScript()

    private lateinit var _dmScriptExecutionDmTag: DmScriptExecutionDmTagPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.dm_script_execution_dm_tag</code> table
     */
    fun dmScriptExecutionDmTag(): DmScriptExecutionDmTagPath {
        if (!this::_dmScriptExecutionDmTag.isInitialized)
            _dmScriptExecutionDmTag = DmScriptExecutionDmTagPath(this, null, DM_SCRIPT_EXECUTION_DM_TAG__DM_SCRIPT_EXECUTION_DM_TAG_FK_SCRIPT_EXECUTION_REF_FKEY.inverseKey)

        return _dmScriptExecutionDmTag;
    }

    val dmScriptExecutionDmTag: DmScriptExecutionDmTagPath
        get(): DmScriptExecutionDmTagPath = dmScriptExecutionDmTag()

    /**
     * Get the implicit many-to-many join path to the <code>public.dm_tag</code>
     * table
     */
    val dmTag: DmTagPath
        get(): DmTagPath = dmScriptExecutionDmTag().dmTag()
    override fun `as`(alias: String): DmScriptExecution = DmScriptExecution(DSL.name(alias), this)
    override fun `as`(alias: Name): DmScriptExecution = DmScriptExecution(alias, this)
    override fun `as`(alias: Table<*>): DmScriptExecution = DmScriptExecution(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): DmScriptExecution = DmScriptExecution(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): DmScriptExecution = DmScriptExecution(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): DmScriptExecution = DmScriptExecution(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): DmScriptExecution = DmScriptExecution(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): DmScriptExecution = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): DmScriptExecution = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): DmScriptExecution = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): DmScriptExecution = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): DmScriptExecution = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): DmScriptExecution = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): DmScriptExecution = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): DmScriptExecution = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): DmScriptExecution = where(DSL.notExists(select))
}

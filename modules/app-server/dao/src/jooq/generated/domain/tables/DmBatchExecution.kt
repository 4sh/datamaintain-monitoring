/*
 * This file is generated by jOOQ.
 */
package generated.domain.tables


import generated.domain.Public
import generated.domain.enums.BatchExecutionOrigin
import generated.domain.enums.BatchExecutionType
import generated.domain.enums.ExecutionStatus
import generated.domain.keys.DM_BATCH_EXECUTION_PKEY
import generated.domain.keys.DM_BATCH_EXECUTION__DM_BATCH_EXECUTION_FK_ENVIRONMENT_REF_FKEY
import generated.domain.keys.DM_BATCH_EXECUTION__DM_BATCH_EXECUTION_FK_MODULE_REF_FKEY
import generated.domain.tables.records.DmBatchExecutionRecord

import java.time.OffsetDateTime
import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmBatchExecution(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DmBatchExecutionRecord>?,
    aliased: Table<DmBatchExecutionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DmBatchExecutionRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.dm_batch_execution</code>
         */
        val DM_BATCH_EXECUTION: DmBatchExecution = DmBatchExecution()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<DmBatchExecutionRecord> = DmBatchExecutionRecord::class.java

    /**
     * The column <code>public.dm_batch_execution.id</code>.
     */
    val ID: TableField<DmBatchExecutionRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.dm_batch_execution.start_date</code>.
     */
    val START_DATE: TableField<DmBatchExecutionRecord, OffsetDateTime?> = createField(DSL.name("start_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.dm_batch_execution.end_date</code>.
     */
    val END_DATE: TableField<DmBatchExecutionRecord, OffsetDateTime?> = createField(DSL.name("end_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.dm_batch_execution.duration_in_ms</code>.
     */
    val DURATION_IN_MS: TableField<DmBatchExecutionRecord, Int?> = createField(DSL.name("duration_in_ms"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.dm_batch_execution.origin</code>.
     */
    val ORIGIN: TableField<DmBatchExecutionRecord, BatchExecutionOrigin?> = createField(DSL.name("origin"), SQLDataType.VARCHAR.asEnumDataType(generated.domain.enums.BatchExecutionOrigin::class.java), this, "")

    /**
     * The column <code>public.dm_batch_execution.type</code>.
     */
    val TYPE: TableField<DmBatchExecutionRecord, BatchExecutionType?> = createField(DSL.name("type"), SQLDataType.VARCHAR.asEnumDataType(generated.domain.enums.BatchExecutionType::class.java), this, "")

    /**
     * The column <code>public.dm_batch_execution.status</code>.
     */
    val STATUS: TableField<DmBatchExecutionRecord, ExecutionStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(generated.domain.enums.ExecutionStatus::class.java), this, "")

    /**
     * The column <code>public.dm_batch_execution.fk_environment_ref</code>.
     */
    val FK_ENVIRONMENT_REF: TableField<DmBatchExecutionRecord, UUID?> = createField(DSL.name("fk_environment_ref"), SQLDataType.UUID, this, "")

    /**
     * The column <code>public.dm_batch_execution.fk_module_ref</code>.
     */
    val FK_MODULE_REF: TableField<DmBatchExecutionRecord, UUID?> = createField(DSL.name("fk_module_ref"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<DmBatchExecutionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DmBatchExecutionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.dm_batch_execution</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dm_batch_execution</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dm_batch_execution</code> table reference
     */
    constructor(): this(DSL.name("dm_batch_execution"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DmBatchExecutionRecord>): this(Internal.createPathAlias(child, key), child, key, DM_BATCH_EXECUTION, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun getPrimaryKey(): UniqueKey<DmBatchExecutionRecord> = DM_BATCH_EXECUTION_PKEY
    public override fun getReferences(): List<ForeignKey<DmBatchExecutionRecord, *>> = listOf(DM_BATCH_EXECUTION__DM_BATCH_EXECUTION_FK_ENVIRONMENT_REF_FKEY, DM_BATCH_EXECUTION__DM_BATCH_EXECUTION_FK_MODULE_REF_FKEY)

    private lateinit var _dmEnvironment: DmEnvironment
    private lateinit var _dmModule: DmModule

    /**
     * Get the implicit join path to the <code>public.dm_environment</code>
     * table.
     */
    fun dmEnvironment(): DmEnvironment {
        if (!this::_dmEnvironment.isInitialized)
            _dmEnvironment = DmEnvironment(this, DM_BATCH_EXECUTION__DM_BATCH_EXECUTION_FK_ENVIRONMENT_REF_FKEY)

        return _dmEnvironment;
    }

    val dmEnvironment: DmEnvironment
        get(): DmEnvironment = dmEnvironment()

    /**
     * Get the implicit join path to the <code>public.dm_module</code> table.
     */
    fun dmModule(): DmModule {
        if (!this::_dmModule.isInitialized)
            _dmModule = DmModule(this, DM_BATCH_EXECUTION__DM_BATCH_EXECUTION_FK_MODULE_REF_FKEY)

        return _dmModule;
    }

    val dmModule: DmModule
        get(): DmModule = dmModule()
    public override fun `as`(alias: String): DmBatchExecution = DmBatchExecution(DSL.name(alias), this)
    public override fun `as`(alias: Name): DmBatchExecution = DmBatchExecution(alias, this)
    public override fun `as`(alias: Table<*>): DmBatchExecution = DmBatchExecution(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): DmBatchExecution = DmBatchExecution(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): DmBatchExecution = DmBatchExecution(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): DmBatchExecution = DmBatchExecution(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row9<UUID?, OffsetDateTime?, OffsetDateTime?, Int?, BatchExecutionOrigin?, BatchExecutionType?, ExecutionStatus?, UUID?, UUID?> = super.fieldsRow() as Row9<UUID?, OffsetDateTime?, OffsetDateTime?, Int?, BatchExecutionOrigin?, BatchExecutionType?, ExecutionStatus?, UUID?, UUID?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, OffsetDateTime?, OffsetDateTime?, Int?, BatchExecutionOrigin?, BatchExecutionType?, ExecutionStatus?, UUID?, UUID?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, OffsetDateTime?, OffsetDateTime?, Int?, BatchExecutionOrigin?, BatchExecutionType?, ExecutionStatus?, UUID?, UUID?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}

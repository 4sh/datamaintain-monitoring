/*
 * This file is generated by jOOQ.
 */
package generated.domain.tables


import generated.domain.Public
import generated.domain.indexes.MODULE_ENVIRONMENT
import generated.domain.keys.DM_MODULE_DM_ENVIRONMENT_TOKEN_PKEY
import generated.domain.keys.DM_MODULE_DM_ENVIRONMENT_TOKEN__DM_MODULE_DM_ENVIRONMENT_TOKEN_FK_ENVIRONMENT_REF_FKEY
import generated.domain.keys.DM_MODULE_DM_ENVIRONMENT_TOKEN__DM_MODULE_DM_ENVIRONMENT_TOKEN_FK_MODULE_REF_FKEY
import generated.domain.tables.records.DmModuleDmEnvironmentTokenRecord

import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmModuleDmEnvironmentToken(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DmModuleDmEnvironmentTokenRecord>?,
    aliased: Table<DmModuleDmEnvironmentTokenRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DmModuleDmEnvironmentTokenRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>public.dm_module_dm_environment_token</code>
         */
        val DM_MODULE_DM_ENVIRONMENT_TOKEN: DmModuleDmEnvironmentToken = DmModuleDmEnvironmentToken()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<DmModuleDmEnvironmentTokenRecord> = DmModuleDmEnvironmentTokenRecord::class.java

    /**
     * The column
     * <code>public.dm_module_dm_environment_token.fk_module_ref</code>.
     */
    val FK_MODULE_REF: TableField<DmModuleDmEnvironmentTokenRecord, UUID?> = createField(DSL.name("fk_module_ref"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>public.dm_module_dm_environment_token.fk_environment_ref</code>.
     */
    val FK_ENVIRONMENT_REF: TableField<DmModuleDmEnvironmentTokenRecord, UUID?> = createField(DSL.name("fk_environment_ref"), SQLDataType.UUID, this, "")

    /**
     * The column
     * <code>public.dm_module_dm_environment_token.token_value</code>.
     */
    val TOKEN_VALUE: TableField<DmModuleDmEnvironmentTokenRecord, UUID?> = createField(DSL.name("token_value"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    private constructor(alias: Name, aliased: Table<DmModuleDmEnvironmentTokenRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DmModuleDmEnvironmentTokenRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.dm_module_dm_environment_token</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dm_module_dm_environment_token</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dm_module_dm_environment_token</code> table
     * reference
     */
    constructor(): this(DSL.name("dm_module_dm_environment_token"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DmModuleDmEnvironmentTokenRecord>): this(Internal.createPathAlias(child, key), child, key, DM_MODULE_DM_ENVIRONMENT_TOKEN, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun getIndexes(): List<Index> = listOf(MODULE_ENVIRONMENT)
    public override fun getPrimaryKey(): UniqueKey<DmModuleDmEnvironmentTokenRecord> = DM_MODULE_DM_ENVIRONMENT_TOKEN_PKEY
    public override fun getReferences(): List<ForeignKey<DmModuleDmEnvironmentTokenRecord, *>> = listOf(DM_MODULE_DM_ENVIRONMENT_TOKEN__DM_MODULE_DM_ENVIRONMENT_TOKEN_FK_MODULE_REF_FKEY, DM_MODULE_DM_ENVIRONMENT_TOKEN__DM_MODULE_DM_ENVIRONMENT_TOKEN_FK_ENVIRONMENT_REF_FKEY)

    private lateinit var _dmModule: DmModule
    private lateinit var _dmEnvironment: DmEnvironment

    /**
     * Get the implicit join path to the <code>public.dm_module</code> table.
     */
    fun dmModule(): DmModule {
        if (!this::_dmModule.isInitialized)
            _dmModule = DmModule(this, DM_MODULE_DM_ENVIRONMENT_TOKEN__DM_MODULE_DM_ENVIRONMENT_TOKEN_FK_MODULE_REF_FKEY)

        return _dmModule;
    }

    val dmModule: DmModule
        get(): DmModule = dmModule()

    /**
     * Get the implicit join path to the <code>public.dm_environment</code>
     * table.
     */
    fun dmEnvironment(): DmEnvironment {
        if (!this::_dmEnvironment.isInitialized)
            _dmEnvironment = DmEnvironment(this, DM_MODULE_DM_ENVIRONMENT_TOKEN__DM_MODULE_DM_ENVIRONMENT_TOKEN_FK_ENVIRONMENT_REF_FKEY)

        return _dmEnvironment;
    }

    val dmEnvironment: DmEnvironment
        get(): DmEnvironment = dmEnvironment()
    public override fun `as`(alias: String): DmModuleDmEnvironmentToken = DmModuleDmEnvironmentToken(DSL.name(alias), this)
    public override fun `as`(alias: Name): DmModuleDmEnvironmentToken = DmModuleDmEnvironmentToken(alias, this)
    public override fun `as`(alias: Table<*>): DmModuleDmEnvironmentToken = DmModuleDmEnvironmentToken(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): DmModuleDmEnvironmentToken = DmModuleDmEnvironmentToken(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): DmModuleDmEnvironmentToken = DmModuleDmEnvironmentToken(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): DmModuleDmEnvironmentToken = DmModuleDmEnvironmentToken(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row3<UUID?, UUID?, UUID?> = super.fieldsRow() as Row3<UUID?, UUID?, UUID?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?, UUID?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?, UUID?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}

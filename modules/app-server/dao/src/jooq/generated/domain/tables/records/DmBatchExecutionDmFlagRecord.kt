/*
 * This file is generated by jOOQ.
 */
package generated.domain.tables.records


import generated.domain.tables.DmBatchExecutionDmFlag

import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.util.UUID

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmBatchExecutionDmFlagRecord() : UpdatableRecordImpl<DmBatchExecutionDmFlagRecord>(DmBatchExecutionDmFlag.DM_BATCH_EXECUTION_DM_FLAG) {

    @get:NotNull
    open var fkBatchExecutionRef: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    @get:NotNull
    @get:Size(max = 255)
    open var fkFlagRef: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<UUID?, String?> = super.key() as Record2<UUID?, String?>

    /**
     * Create a detached, initialised DmBatchExecutionDmFlagRecord
     */
    constructor(fkBatchExecutionRef: UUID? = null, fkFlagRef: String? = null): this() {
        this.fkBatchExecutionRef = fkBatchExecutionRef
        this.fkFlagRef = fkFlagRef
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised DmBatchExecutionDmFlagRecord
     */
    constructor(value: generated.domain.tables.pojos.DmBatchExecutionDmFlag?): this() {
        if (value != null) {
            this.fkBatchExecutionRef = value.fkBatchExecutionRef
            this.fkFlagRef = value.fkFlagRef
            resetChangedOnNotNull()
        }
    }
}

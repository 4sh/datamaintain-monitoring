/*
 * This file is generated by jOOQ.
 */
package generated.domain.tables.records


import generated.domain.tables.DmEnvironment

import jakarta.validation.constraints.Size

import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmEnvironmentRecord() : UpdatableRecordImpl<DmEnvironmentRecord>(DmEnvironment.DM_ENVIRONMENT) {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    @get:Size(max = 255)
    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    @get:Size(max = 255)
    open var smallName: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var fkProjectRef: UUID?
        set(value): Unit = set(3, value)
        get(): UUID? = get(3) as UUID?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised DmEnvironmentRecord
     */
    constructor(id: UUID? = null, name: String? = null, smallName: String? = null, fkProjectRef: UUID? = null): this() {
        this.id = id
        this.name = name
        this.smallName = smallName
        this.fkProjectRef = fkProjectRef
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised DmEnvironmentRecord
     */
    constructor(value: generated.domain.tables.pojos.DmEnvironment?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.smallName = value.smallName
            this.fkProjectRef = value.fkProjectRef
            resetChangedOnNotNull()
        }
    }
}

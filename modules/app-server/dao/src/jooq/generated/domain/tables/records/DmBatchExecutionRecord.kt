/*
 * This file is generated by jOOQ.
 */
package generated.domain.tables.records


import generated.domain.enums.BatchExecutionOrigin
import generated.domain.enums.BatchExecutionType
import generated.domain.enums.ExecutionStatus
import generated.domain.tables.DmBatchExecution

import java.time.OffsetDateTime
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmBatchExecutionRecord() : UpdatableRecordImpl<DmBatchExecutionRecord>(DmBatchExecution.DM_BATCH_EXECUTION) {

    open var id: UUID?
        set(value): Unit = set(0, value)
        get(): UUID? = get(0) as UUID?

    open var startDate: OffsetDateTime?
        set(value): Unit = set(1, value)
        get(): OffsetDateTime? = get(1) as OffsetDateTime?

    open var endDate: OffsetDateTime?
        set(value): Unit = set(2, value)
        get(): OffsetDateTime? = get(2) as OffsetDateTime?

    open var durationInMs: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var origin: BatchExecutionOrigin?
        set(value): Unit = set(4, value)
        get(): BatchExecutionOrigin? = get(4) as BatchExecutionOrigin?

    open var type: BatchExecutionType?
        set(value): Unit = set(5, value)
        get(): BatchExecutionType? = get(5) as BatchExecutionType?

    open var status: ExecutionStatus?
        set(value): Unit = set(6, value)
        get(): ExecutionStatus? = get(6) as ExecutionStatus?

    open var fkEnvironmentRef: UUID?
        set(value): Unit = set(7, value)
        get(): UUID? = get(7) as UUID?

    open var fkModuleRef: UUID?
        set(value): Unit = set(8, value)
        get(): UUID? = get(8) as UUID?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised DmBatchExecutionRecord
     */
    constructor(id: UUID? = null, startDate: OffsetDateTime? = null, endDate: OffsetDateTime? = null, durationInMs: Int? = null, origin: BatchExecutionOrigin? = null, type: BatchExecutionType? = null, status: ExecutionStatus? = null, fkEnvironmentRef: UUID? = null, fkModuleRef: UUID? = null): this() {
        this.id = id
        this.startDate = startDate
        this.endDate = endDate
        this.durationInMs = durationInMs
        this.origin = origin
        this.type = type
        this.status = status
        this.fkEnvironmentRef = fkEnvironmentRef
        this.fkModuleRef = fkModuleRef
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised DmBatchExecutionRecord
     */
    constructor(value: generated.domain.tables.pojos.DmBatchExecution?): this() {
        if (value != null) {
            this.id = value.id
            this.startDate = value.startDate
            this.endDate = value.endDate
            this.durationInMs = value.durationInMs
            this.origin = value.origin
            this.type = value.type
            this.status = value.status
            this.fkEnvironmentRef = value.fkEnvironmentRef
            this.fkModuleRef = value.fkModuleRef
            resetChangedOnNotNull()
        }
    }
}

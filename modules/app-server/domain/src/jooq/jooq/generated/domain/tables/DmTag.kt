/*
 * This file is generated by jOOQ.
 */
package jooq.generated.domain.tables


import java.util.function.Function

import jooq.generated.domain.Public
import jooq.generated.domain.keys.DM_TAG_PKEY
import jooq.generated.domain.tables.records.DmTagRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row1
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmTag(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DmTagRecord>?,
    aliased: Table<DmTagRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DmTagRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.dm_tag</code>
         */
        val DM_TAG: DmTag = DmTag()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<DmTagRecord> = DmTagRecord::class.java

    /**
     * The column <code>public.dm_tag.name</code>.
     */
    val NAME: TableField<DmTagRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<DmTagRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DmTagRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.dm_tag</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dm_tag</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dm_tag</code> table reference
     */
    constructor(): this(DSL.name("dm_tag"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DmTagRecord>): this(Internal.createPathAlias(child, key), child, key, DM_TAG, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun getPrimaryKey(): UniqueKey<DmTagRecord> = DM_TAG_PKEY
    public override fun `as`(alias: String): DmTag = DmTag(DSL.name(alias), this)
    public override fun `as`(alias: Name): DmTag = DmTag(alias, this)
    public override fun `as`(alias: Table<*>): DmTag = DmTag(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): DmTag = DmTag(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): DmTag = DmTag(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): DmTag = DmTag(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row1<String?> = super.fieldsRow() as Row1<String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}

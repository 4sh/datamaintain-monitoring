/*
 * This file is generated by jOOQ.
 */
package jooq.generated.domain.tables


import java.time.OffsetDateTime
import java.util.UUID
import java.util.function.Function

import jooq.generated.domain.Public
import jooq.generated.domain.enums.ScriptExecutionStatus
import jooq.generated.domain.keys.DM_SCRIPT_EXECUTION_PKEY
import jooq.generated.domain.keys.DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_BATCH_EXECUTION_REF_FKEY
import jooq.generated.domain.keys.DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_SCRIPT_REF_FKEY
import jooq.generated.domain.tables.records.DmScriptExecutionRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmScriptExecution(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DmScriptExecutionRecord>?,
    aliased: Table<DmScriptExecutionRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DmScriptExecutionRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.dm_script_execution</code>
         */
        val DM_SCRIPT_EXECUTION: DmScriptExecution = DmScriptExecution()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<DmScriptExecutionRecord> = DmScriptExecutionRecord::class.java

    /**
     * The column <code>public.dm_script_execution.id</code>.
     */
    val ID: TableField<DmScriptExecutionRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.dm_script_execution.start_date</code>.
     */
    val START_DATE: TableField<DmScriptExecutionRecord, OffsetDateTime?> = createField(DSL.name("start_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.dm_script_execution.end_date</code>.
     */
    val END_DATE: TableField<DmScriptExecutionRecord, OffsetDateTime?> = createField(DSL.name("end_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "")

    /**
     * The column <code>public.dm_script_execution.duration_in_ms</code>.
     */
    val DURATION_IN_MS: TableField<DmScriptExecutionRecord, Int?> = createField(DSL.name("duration_in_ms"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.dm_script_execution.output</code>.
     */
    val OUTPUT: TableField<DmScriptExecutionRecord, String?> = createField(DSL.name("output"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.dm_script_execution.status</code>.
     */
    val STATUS: TableField<DmScriptExecutionRecord, ScriptExecutionStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.asEnumDataType(jooq.generated.domain.enums.ScriptExecutionStatus::class.java), this, "")

    /**
     * The column <code>public.dm_script_execution.fk_script_ref</code>.
     */
    val FK_SCRIPT_REF: TableField<DmScriptExecutionRecord, String?> = createField(DSL.name("fk_script_ref"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column
     * <code>public.dm_script_execution.fk_batch_execution_ref</code>.
     */
    val FK_BATCH_EXECUTION_REF: TableField<DmScriptExecutionRecord, UUID?> = createField(DSL.name("fk_batch_execution_ref"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<DmScriptExecutionRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DmScriptExecutionRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.dm_script_execution</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dm_script_execution</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dm_script_execution</code> table reference
     */
    constructor(): this(DSL.name("dm_script_execution"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DmScriptExecutionRecord>): this(Internal.createPathAlias(child, key), child, key, DM_SCRIPT_EXECUTION, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun getPrimaryKey(): UniqueKey<DmScriptExecutionRecord> = DM_SCRIPT_EXECUTION_PKEY
    public override fun getReferences(): List<ForeignKey<DmScriptExecutionRecord, *>> = listOf(DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_SCRIPT_REF_FKEY, DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_BATCH_EXECUTION_REF_FKEY)

    private lateinit var _dmScript: DmScript
    private lateinit var _dmBatchExecution: DmBatchExecution

    /**
     * Get the implicit join path to the <code>public.dm_script</code> table.
     */
    fun dmScript(): DmScript {
        if (!this::_dmScript.isInitialized)
            _dmScript = DmScript(this, DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_SCRIPT_REF_FKEY)

        return _dmScript;
    }

    val dmScript: DmScript
        get(): DmScript = dmScript()

    /**
     * Get the implicit join path to the <code>public.dm_batch_execution</code>
     * table.
     */
    fun dmBatchExecution(): DmBatchExecution {
        if (!this::_dmBatchExecution.isInitialized)
            _dmBatchExecution = DmBatchExecution(this, DM_SCRIPT_EXECUTION__DM_SCRIPT_EXECUTION_FK_BATCH_EXECUTION_REF_FKEY)

        return _dmBatchExecution;
    }

    val dmBatchExecution: DmBatchExecution
        get(): DmBatchExecution = dmBatchExecution()
    public override fun `as`(alias: String): DmScriptExecution = DmScriptExecution(DSL.name(alias), this)
    public override fun `as`(alias: Name): DmScriptExecution = DmScriptExecution(alias, this)
    public override fun `as`(alias: Table<*>): DmScriptExecution = DmScriptExecution(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): DmScriptExecution = DmScriptExecution(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): DmScriptExecution = DmScriptExecution(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): DmScriptExecution = DmScriptExecution(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row8<UUID?, OffsetDateTime?, OffsetDateTime?, Int?, String?, ScriptExecutionStatus?, String?, UUID?> = super.fieldsRow() as Row8<UUID?, OffsetDateTime?, OffsetDateTime?, Int?, String?, ScriptExecutionStatus?, String?, UUID?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, OffsetDateTime?, OffsetDateTime?, Int?, String?, ScriptExecutionStatus?, String?, UUID?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, OffsetDateTime?, OffsetDateTime?, Int?, String?, ScriptExecutionStatus?, String?, UUID?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}

/*
 * This file is generated by jOOQ.
 */
package jooq.generated.domain.tables


import java.util.UUID
import java.util.function.Function

import jooq.generated.domain.Public
import jooq.generated.domain.keys.DM_ENVIRONMENT_PKEY
import jooq.generated.domain.keys.DM_ENVIRONMENT__DM_ENVIRONMENT_FK_PROJECT_REF_FKEY
import jooq.generated.domain.tables.records.DmEnvironmentRecord

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmEnvironment(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, DmEnvironmentRecord>?,
    aliased: Table<DmEnvironmentRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<DmEnvironmentRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.dm_environment</code>
         */
        val DM_ENVIRONMENT: DmEnvironment = DmEnvironment()
    }

    /**
     * The class holding records for this type
     */
    public override fun getRecordType(): Class<DmEnvironmentRecord> = DmEnvironmentRecord::class.java

    /**
     * The column <code>public.dm_environment.id</code>.
     */
    val ID: TableField<DmEnvironmentRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "")

    /**
     * The column <code>public.dm_environment.name</code>.
     */
    val NAME: TableField<DmEnvironmentRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.dm_environment.fk_project_ref</code>.
     */
    val FK_PROJECT_REF: TableField<DmEnvironmentRecord, UUID?> = createField(DSL.name("fk_project_ref"), SQLDataType.UUID, this, "")

    private constructor(alias: Name, aliased: Table<DmEnvironmentRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<DmEnvironmentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.dm_environment</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.dm_environment</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.dm_environment</code> table reference
     */
    constructor(): this(DSL.name("dm_environment"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, DmEnvironmentRecord>): this(Internal.createPathAlias(child, key), child, key, DM_ENVIRONMENT, null)
    public override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    public override fun getPrimaryKey(): UniqueKey<DmEnvironmentRecord> = DM_ENVIRONMENT_PKEY
    public override fun getReferences(): List<ForeignKey<DmEnvironmentRecord, *>> = listOf(DM_ENVIRONMENT__DM_ENVIRONMENT_FK_PROJECT_REF_FKEY)

    private lateinit var _dmProject: DmProject

    /**
     * Get the implicit join path to the <code>public.dm_project</code> table.
     */
    fun dmProject(): DmProject {
        if (!this::_dmProject.isInitialized)
            _dmProject = DmProject(this, DM_ENVIRONMENT__DM_ENVIRONMENT_FK_PROJECT_REF_FKEY)

        return _dmProject;
    }

    val dmProject: DmProject
        get(): DmProject = dmProject()
    public override fun `as`(alias: String): DmEnvironment = DmEnvironment(DSL.name(alias), this)
    public override fun `as`(alias: Name): DmEnvironment = DmEnvironment(alias, this)
    public override fun `as`(alias: Table<*>): DmEnvironment = DmEnvironment(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    public override fun rename(name: String): DmEnvironment = DmEnvironment(DSL.name(name), null)

    /**
     * Rename this table
     */
    public override fun rename(name: Name): DmEnvironment = DmEnvironment(name, null)

    /**
     * Rename this table
     */
    public override fun rename(name: Table<*>): DmEnvironment = DmEnvironment(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    public override fun fieldsRow(): Row3<UUID?, String?, UUID?> = super.fieldsRow() as Row3<UUID?, String?, UUID?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, String?, UUID?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, String?, UUID?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}

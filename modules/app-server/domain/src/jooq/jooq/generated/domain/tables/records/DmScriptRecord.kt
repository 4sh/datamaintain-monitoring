/*
 * This file is generated by jOOQ.
 */
package jooq.generated.domain.tables.records


import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import jooq.generated.domain.tables.DmScript

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DmScriptRecord() : UpdatableRecordImpl<DmScriptRecord>(DmScript.DM_SCRIPT), Record3<String?, String?, String?> {

    @get:Size(max = 255)
    open var name: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    @get:NotNull
    @get:Size(max = 255)
    open var checksum: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    @get:Size(max = 255)
    open var content: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    public override fun key(): Record1<String?> = super.key() as Record1<String?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    public override fun fieldsRow(): Row3<String?, String?, String?> = super.fieldsRow() as Row3<String?, String?, String?>
    public override fun valuesRow(): Row3<String?, String?, String?> = super.valuesRow() as Row3<String?, String?, String?>
    public override fun field1(): Field<String?> = DmScript.DM_SCRIPT.NAME
    public override fun field2(): Field<String?> = DmScript.DM_SCRIPT.CHECKSUM
    public override fun field3(): Field<String?> = DmScript.DM_SCRIPT.CONTENT
    public override fun component1(): String? = name
    public override fun component2(): String? = checksum
    public override fun component3(): String? = content
    public override fun value1(): String? = name
    public override fun value2(): String? = checksum
    public override fun value3(): String? = content

    public override fun value1(value: String?): DmScriptRecord {
        set(0, value)
        return this
    }

    public override fun value2(value: String?): DmScriptRecord {
        set(1, value)
        return this
    }

    public override fun value3(value: String?): DmScriptRecord {
        set(2, value)
        return this
    }

    public override fun values(value1: String?, value2: String?, value3: String?): DmScriptRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised DmScriptRecord
     */
    constructor(name: String? = null, checksum: String? = null, content: String? = null): this() {
        this.name = name
        this.checksum = checksum
        this.content = content
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised DmScriptRecord
     */
    constructor(value: jooq.generated.domain.tables.pojos.DmScript?): this() {
        if (value != null) {
            this.name = value.name
            this.checksum = value.checksum
            this.content = value.content
            resetChangedOnNotNull()
        }
    }
}
